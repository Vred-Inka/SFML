Speefiation 2

Player: spawns from config. 
- must spawn in the center of the screen at the beginning of the game, and after it dies (collides with an enemy)
-moves by speed bring from config file in these directions: Up:W key, Left:A key, Down: S key, Right: D key
-moves only within the bounds of the window
-shoot the bullet toward the mouse pointer when the left mouse button is clicked. The speed, size, and lifespan of the bullets are read from the config file.

Special ability:
Right button click: 
- multiple enemies (bullets etc) spawned by special wepon
- entities have some unique graphic associate with them
- a unique game mechanic is introduced via a new component
- a "cooldown timer" must be implemented for a special weapon
The properties for the special move are not in the config file.

Enemy(s):
-will spawn in a random location on the screen every X frames, where X is defined in the configuration file.
-must not overlap the sides of the screen at the time of spawn.
- shapes have random number of vertices, between a given minimum and maximum number, which is specified in a config file.
- shapes radius will be specified in the configuration file.
- will be given a random color upon spawning
- will be given a random speed upon spawninf, between a minimum and maximum value specified in the file
- when the enemy reaches the edge of the window, it should bounce off in the oposite direction of the same speed
- when (large) enemies collide with a bullet or player, they are destroyed, and N small enemies spawn in it's place, where N is the number of verticies of the original enemy. Each small enemy must have the same number of verticies and color of the original enemy. These small entities travel outward at the angels at a fixed intervals equal to (360/verticies). 

Score:
-n*100, where N is the number of verticies enemy has. Small enemies get double this value.
- if the player bullet kills enemy, the game score is increased by the score component of the enemy killed
- the score should be displayed with the font specified by the config file in the top-left corner of the screen

Drawing: 
- n the render system, all entities should be given a slow rotation, which makes the game look a little nicer.
- Any special effects which do not alter game play can be added.
- Any Entity with a lifespan is urrently alie it should hae its Color alpha hanel set to ratio depending on how long it has left to live. For eaple if entity has a 80 frame life span, and 25 frames remaining, its alpha value should be set to (float)25/80 * 255. The alpha should go from 255 when it is first spawned, to 0  on the last frame it is alive.

CUI:
- Display options to turn off each system independantly
- For each entity in the game, imgui should list the ID, tag, and position lists of that entity. You must display a list of all entities, as well as lists of entities by their tag. You must also have some way of destroying a given entity by interacting with the UI element associated with it.
- You must be able to change the enemy spawn internal through the Gui
- You must be able to manually spawn enemies in the same way through the GUI

Misc:
- The "P" key should paue the game
- The "ESC" key should close the game

Configuration file:
Window 		W H FL FS
Width  		W int
Height 		H int
FPS 	   FS int
Foolscreen FS bool

Font F S R G B
 Font File    F 	std::string
 Font Size    S 	int
 RGB color (R,G,B)  int, int, int
 
Player SR CR S FR FG FB OR OG OB OT V
Shape Radius	 	 SR     int
Collision Radius 	 CR     int
Speed			 	 S      float
Fill Color		 (FR,FG,FB) int, int, int
Outline Color  	 (OR,OG,OB) int, int, int
Outline Thickness 	 OT		int
Shape Vertices		 V		int

Enemy SR CR SMIN SMAX OR OG OB OT VMIN VMAX L SI
Shape Radius	 	 SR      int
Collision Radius 	 CR      int
Min/Max Speed	  SMIN,SMAX  float, float
Outline Color  	  (OR,OG,OB) int, int, int
Outline Thickness 	 OT		 int
Min/Max Vertices  VMIN,VMAX	 int
Small Lifespan		 L		 int
Spawn Interval		 SP		 int

Bullet SR CR S FR FG FB OR OG OB OT V L
Shape Radius	 	 SR     int
Collision Radius 	 CR     int
Speed			 	 S      float
Fill Color		 (FR,FG,FB) int, int, int
Outline Color  	 (OR,OG,OB) int, int, int
Outline Thickness 	 OT		int
Shape Vertices		 V		int
Small Lifespan		 L		 int

Hints:
1. Implement the Vec2 class
2. Implement the basic functionality in the EntityManager class. AddEntity() and Update()
3. Implement basics of the Game class:
 a. Construct a player Entity using the SpawnPlayer() function
 b. Implement basic drawing of the entities using the Game::sRender() function
 c. Construct some enemies using the SpawnEnemy() function
 d. Construct a bullet using the SpawnBullet() function
4. Implement Player Movement in Game::sUserInput and Game::sMovement
5. Implement the EntityManager::Update() function so it deleted dead entities
6. Implement the EntityManager::GetEntities(tag) functionality
7. Implement collisions in sCollision and entity.Destroy() if it's dead
8. Implement the rest of the game's functionality, including config reading
9. Implement GUI


